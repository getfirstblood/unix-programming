1、c++中list对象的学习
2、快速排序（ok）
3、数据库操作（系统级、表操作）、视图
4、数据结构后部分复习（ok）

循环链表结点最长问题
全排列
数据库:数据库中没有全称量词，需要转换为存在量词;没有蕴涵逻辑运算，需要将p->q 转换为 ～p V q
有三个表：（S、C、SC）
问题：1、选修了全部课程的学生号
2、至少选修了0999学生所选课程的学生号
1、(∀x)p  === ~(Ex(~p))
2、(∀x)p->q === ～（Ex~(p->q)） === ~(Ex~(~pVq)) === ~(Ex(p且～q))
模拟工厂模式
图的最短路径

哈夫曼树

KMP算法如何确定next【】数组的？？

图的存储结构 ，最短路径算法
二叉排序树的删除、平衡二叉树、
二叉树的前序非递归实现

volatitile
　1）. 并行设备的硬件寄存器（如：状态寄存器）
　2）. 一个中断服务子程序中会访问到的非自动变量（Non-automatic variables)
　3）. 多线程应用中被几个任务共享的变量

operator const char *() const
如果是重载*的话，那应该写成：const char operator * () const而不是楼主所写的那样，而且即使是这样写那也不正确的，因为运算符重载中有几个运算符的返回值是有格式的（约定），如operator * 在重载时通常返回值是classType&或者const classType& 。
operator const char*() const是类型转换函数的定义，即该类型可以自动转换为const char*类型。至于最后一个const，那个大家都知道是对类成员的限制（不允许更改对象的状态）
虽然我不知道你的类是什么，但是我可以给你举一个简单的例子说明一下问题。比如我们现在自定一个一个整型（MyInt），它允许在需要使用C++语言中的int类型时将MyInt类型转换为int类型：
class MyInt {
     public:
          operator int () const;
     private:
          int elem;
};
MyInt::operator int () const
{
    return elem;
}
就可以在需要使用int类型时使用MyInt。
还有你需要记住，C++中没有返回类型的函数有3个，构造函数、析构函数、类型转换函数。前两个是不写返回类型函数实现中也不允许出现return语句（所以不同于void)，
最后一个则是不写返回类型，但是必须返回对应类型的值，即必须出现return语句。

malloc,free和new,delete有区别吗？如果有，是什么？
1,malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。
2, 对于非内部数据类型的对象而言，光用maloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。
3,因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以一个能完成清理与释放内存工作的运算符delete。注意new/delete不是库函数。
4,C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存

gcc编译选项
-c -o -L -g -share 生成静态链接库：ar crv test.a test1.o test2.o test3.o  生成动态链接库：gcc -shared -o libtt.so tt.c可以通过help --gcc 查看
gdb中如何设置中断点，逐步调试程序
break run continue print next qiut list forward tbreak clear awatch watch commands delete disable enable ignore condition cont step display backtrace frame infoframe
windows中的内存分配方式
固定分区 动态分区 可重定位动态分区 分页 分段

存储过程语法
sql语句：


c++ const作用：1、变量不可变。 2、变量默认为文件的局部变量 3、通常不为它分配内存空间，而只是存在符号表中。

#define 宏定义可以用什么等价方式替换？

头文件中应该放：类的定义、extern 变量声明、函数声明（不应该含有定义有三个除外：类、编译时就知道值的const变量、inline函数）

预处理的作用：1、防止多重包含时的重复声明（文件保护符）

c++ 中std(标准库中的三个类型介绍：string、vertor、bitmap)：他们有自己的配套类型（供成员方法使用）
string类型：如遍历string成员：
for（stringh::size_type i = 0;i != s.size();i++）
{
}
vector类型（使用类模板）。vector是什么存储结构（动态数组）
参考链接：http://blog.csdn.net/junguo/article/details/671142
http://wenku.baidu.com/view/2355e2630b1c59eef8c7b47d.html

总结：1、STL中为我们提供的最重要的两个内容是容器（vector，list等）和一系列的算法。在这些算法中有许多需要遍历容器中的所有元素，如search，sort等算法。STL的设计者希望将算法和容器分离开来，一个算法可以帮不同的容器实现功能。为此目的，STL应用到了《设计模式》中提到的迭代器模式。
    《设计模式》中将迭代器模式定义为：提供一种方法，使之能依序遍历容器中的每个元素，而不需要暴露容器内部的信息。在面向对象的设计里，实现迭代器，我们会为所有的迭代器提供一个统一的接口，然后更个容器的迭代器继承这个接口，然后在使用处通过接口来实现对不同迭代器的调用。但STL是采用泛型思维，利用摸版来实现的类库，所以它的迭代器的实现和面向对象稍有不同，但原理类似。在此将通过例子来具体看看STL中迭代器的实现
    2、每个容器有自己的迭代器（遍历元素之类的功能），这样算法就能通过这些迭代器在所有容器上通用。
    
七种通用的数据结构（容器）：
vector、list、deque（双向队列）、stack、queue、map
七十多中通用算法：
（1）只检查不更改数据的算法：find()、count()
(2)会更改容器内元素的算法：copy()、reverse()等
（3）和数值相关的算法：accumulate()等
抽象的指针---迭代子（iterators）
（1）输入型 （2）输出型 （3）前进型 （4）双向型 （5）随机存取型

动态申请一个二维数组指针(十行两列)：
int **p;
p = new int *a[10];
p[i] = new int[2];